def extract_method(self, ids: List[str] = None, pin: Optional[str] = None) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """
    Executa o pipeline de extra√ß√£o de usu√°rios e departamentos de forma totalmente din√¢mica,
    com base nos locators configurados no JSON (sem hardcodes).
    """
    resultados_users = []
    resultados_deptos = []
    deptos_processados = set()
    deptos_a_processar = []
    usuarios_processados = set()
    usuarios_a_processar = set()

    WebScrapping.log(f" üÜî Iniciando extra√ß√£o com {len(ids) if ids else 0} IDs de origem.", "INFO")

    if not ids:
        WebScrapping.log(" ‚ö†Ô∏è Lista de IDs vazia recebida", "WARNING")
        return pd.DataFrame(), pd.DataFrame()

    # Remove duplicados e espa√ßos
    ids_validos = list(dict.fromkeys([str(id_).strip() for id_ in ids if id_ and str(id_).strip()]))

    # Carrega steps do JSON
    users_locators = self.locators_global.get("users", {}).get("steps", [])
    depto_locators = self.locators_global.get("depto", {}).get("steps", [])

    # ==============================
    # üîπ 1Ô∏è‚É£ PROCESSAMENTO DE USU√ÅRIOS
    # ==============================
    for idx, uid_origem in enumerate(ids_validos):
        uid = uid_origem
        WebScrapping.log(f" üîç {idx + 1}/{len(ids_validos)} - Processando usu√°rio UID: {uid}", "INFO")

        try:
            # ‚öôÔ∏è Passa explicitamente o UID, sem sobrescrever o self.parametro
            resultado_user = self.executar_passos(parametro=uid, steps=users_locators, pin=pin)
        except Exception as e:
            WebScrapping.log(f" ‚ùå Erro ao processar UID {uid}: {str(e)}", "ERROR")
            continue

        # üîé Extrai e-mail e departamento do resultado
        email = resultado_user.get("E-mail")
        depto_id = resultado_user.get("UID Setor") or resultado_user.get("Setor ID") or resultado_user.get("parametro")

        if not email:
            WebScrapping.log(f" ‚ö†Ô∏è Usu√°rio {uid} sem E-mail. Ignorado.", "WARNING")
            continue

        # Evita reprocessar o mesmo e-mail
        if email in usuarios_processados:
            continue

        # üîß Substitui o par√¢metro para uso futuro com o e-mail
        resultado_user["parametro"] = email.strip()

        # üß© Monta DataFrame de usu√°rio
        df_user = pd.DataFrame([resultado_user]).copy()
        df_user["UID.1"] = uid
        df_user["UID Setor"] = depto_id
        resultados_users.append(df_user)

        usuarios_processados.add(email)
        WebScrapping.log(f" ‚úÖ Usu√°rio {uid} ({email}) processado com sucesso.", "INFO")

        # Coleta departamentos a processar
        if depto_id and depto_id not in deptos_a_processar:
            deptos_a_processar.append(depto_id)

    # ==============================
    # üîπ 2Ô∏è‚É£ PROCESSAMENTO DE DEPARTAMENTOS
    # ==============================
    deptos_a_processar = list(dict.fromkeys([d for d in deptos_a_processar if d]))

    for idx, depto_id in enumerate(deptos_a_processar):
        WebScrapping.log(f" üè¢ {idx + 1}/{len(deptos_a_processar)} - Processando setor: {depto_id}", "INFO")

        try:
            # ‚öôÔ∏è Passa explicitamente o depto_id
            resultado_depto = self.executar_passos(parametro=depto_id, steps=depto_locators, pin=pin)
        except Exception as e:
            WebScrapping.log(f" ‚ùå Erro ao processar setor '{depto_id}': {str(e)}", "ERROR")
            continue

        if not resultado_depto:
            WebScrapping.log(f" ‚ö†Ô∏è Setor {depto_id} retornou vazio.", "WARNING")
            continue

        uid_responsavel = resultado_depto.get("UID Respons√°vel")
        if not uid_responsavel:
            WebScrapping.log(f" ‚ö†Ô∏è Setor {depto_id} sem respons√°vel definido.", "WARNING")

        # üß© Monta DataFrame do setor
        df_depto = pd.DataFrame([resultado_depto]).copy()
        df_depto["Id Setor.1"] = depto_id
        resultados_deptos.append(df_depto)
        deptos_processados.add(depto_id)

        WebScrapping.log(f" ‚úÖ Setor {resultado_depto.get('Setor', '(sem nome)')} processado com sucesso.", "INFO")

        # üîÅ Adiciona respons√°vel para reprocessar (por UID)
        if uid_responsavel and uid_responsavel not in usuarios_a_processar:
            usuarios_a_processar.add(uid_responsavel)

    # ==============================
    # üîπ 3Ô∏è‚É£ PROCESSAMENTO DOS RESPONS√ÅVEIS
    # ==============================
    novos_ids_validos = list(dict.fromkeys([u for u in usuarios_a_processar if u]))

    for idx, uid_resp in enumerate(novos_ids_validos):
        WebScrapping.log(f" üë§ {idx + 1}/{len(novos_ids_validos)} - Processando respons√°vel UID: {uid_resp}", "INFO")

        try:
            resultado_user = self.executar_passos(parametro=uid_resp, steps=users_locators, pin=pin)
        except Exception as e:
            WebScrapping.log(f" ‚ùå Erro ao processar respons√°vel '{uid_resp}': {str(e)}", "ERROR")
            continue

        email = resultado_user.get("E-mail")
        if not email or email in usuarios_processados:
            continue

        depto_id = resultado_user.get("UID Setor") or resultado_user.get("Setor ID") or resultado_user.get("parametro")
        resultado_user["parametro"] = email.strip()

        df_user = pd.DataFrame([resultado_user]).copy()
        df_user["UID.1"] = uid_resp
        df_user["UID Setor"] = depto_id
        resultados_users.append(df_user)
        usuarios_processados.add(email)

        WebScrapping.log(f" ‚úÖ Respons√°vel {uid_resp} ({email}) processado com sucesso.", "INFO")

    # ==============================
    # üîπ 4Ô∏è‚É£ FINALIZA√á√ÉO
    # ==============================
    try:
        df_users_final = pd.concat(resultados_users, ignore_index=True) if resultados_users else pd.DataFrame()
        df_deptos_final = pd.concat(resultados_deptos, ignore_index=True) if resultados_deptos else pd.DataFrame()

        WebScrapping.log(
            f" ‚úåÔ∏è Extra√ß√£o conclu√≠da: {len(df_users_final)} usu√°rios e {len(df_deptos_final)} departamentos.",
            "INFO"
        )
        return df_users_final, df_deptos_final

    except Exception as e:
        WebScrapping.log(f" ‚ùå Erro ao concatenar DataFrames: {str(e)}", "ERROR")
        return pd.DataFrame(), pd.DataFrame()