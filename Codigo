import os
import re
import getpass
import platform
import hashlib
import mimetypes
import pandas as pd
from datetime import datetime
from tqdm import tqdm

def gerar_hash_md5(caminho, chunk_size=4096):
    """Gera hash MD5 de um arquivo (usado para identificar duplicados)."""
    try:
        hash_md5 = hashlib.md5()
        with open(caminho, "rb") as f:
            for chunk in iter(lambda: f.read(chunk_size), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()
    except Exception:
        return None


def tamanho_humano(size_bytes):
    """Converte tamanho em bytes para formato leg√≠vel (KB, MB, GB)."""
    for unidade in ['Bytes', 'KB', 'MB', 'GB', 'TB']:
        if size_bytes < 1024:
            return f"{size_bytes:.2f} {unidade}"
        size_bytes /= 1024
    return f"{size_bytes:.2f} PB"


def mapear_pastas(root_dir, calcular_hash=True):
    """
    Mapeia todas as pastas, subpastas e arquivos, coletando informa√ß√µes detalhadas.
    """
    dados = []
    usuario = getpass.getuser()
    sistema = f"{platform.system()} {platform.release()}"

    for dirpath, _, filenames in tqdm(os.walk(root_dir), desc="üîç Mapeando arquivos..."):
        for filename in filenames:
            caminho = os.path.join(dirpath, filename)
            try:
                stats = os.stat(caminho)
                tipo, _ = mimetypes.guess_type(caminho)
                extensao = os.path.splitext(filename)[1].lower()
                unidade = os.path.splitdrive(caminho)[0]
                nivel = caminho.count(os.sep) - root_dir.count(os.sep)
                tamanho_bytes = stats.st_size
                tamanho_mb = round(tamanho_bytes / (1024 * 1024), 3)
                hash_md5 = gerar_hash_md5(caminho) if calcular_hash else None

                dados.append({
                    # --- Identifica√ß√£o b√°sica ---
                    "Arquivo": filename,
                    "Nome_Sem_Extensao": os.path.splitext(filename)[0],
                    "Extensao": extensao,
                    "Pasta": dirpath,
                    "Caminho_Completo": caminho,

                    # --- Tamanho ---
                    "Tamanho_Bytes": tamanho_bytes,
                    "Tamanho_KB": round(tamanho_bytes / 1024, 3),
                    "Tamanho_MB": tamanho_mb,
                    "Tamanho_GB": round(tamanho_mb / 1024, 6),
                    "Tamanho_Humano": tamanho_humano(tamanho_bytes),

                    # --- Datas ---
                    "Data_Criacao": datetime.fromtimestamp(stats.st_ctime),
                    "Data_Modificacao": datetime.fromtimestamp(stats.st_mtime),
                    "Data_Acesso": datetime.fromtimestamp(stats.st_atime),
                    "Idade_Dias": round((datetime.now() - datetime.fromtimestamp(stats.st_ctime)).days, 1),
                    "Ultima_Modificacao_Dias": round((datetime.now() - datetime.fromtimestamp(stats.st_mtime)).days, 1),

                    # --- Sistema e usu√°rio ---
                    "Usuario_Atual": usuario,
                    "Sistema_Operacional": sistema,
                    "Unidade": unidade,
                    "Diretorio_Raiz": os.path.splitdrive(root_dir)[1].split(os.sep)[1] if len(os.path.splitdrive(root_dir)[1].split(os.sep)) > 1 else "",
                    "Nivel_Pasta": nivel,

                    # --- Tipo e permiss√µes ---
                    "Tipo_Arquivo": tipo,
                    "Eh_Arquivo": os.path.isfile(caminho),
                    "Eh_Pasta": os.path.isdir(caminho),
                    "Eh_Link_Simbolico": os.path.islink(caminho),
                    "Permissao_Leitura": os.access(caminho, os.R_OK),
                    "Permissao_Escrita": os.access(caminho, os.W_OK),
                    "Permissao_Execucao": os.access(caminho, os.X_OK),
                    "Permissoes": oct(stats.st_mode)[-3:],

                    # --- Seguran√ßa e hash ---
                    "UID": getattr(stats, "st_uid", None),
                    "GID": getattr(stats, "st_gid", None),
                    "Hash_MD5": hash_md5,

                    # --- An√°lises adicionais ---
                    "Contem_Numero_No_Nome": bool(re.search(r'\d', filename)),
                    "Eh_Backup": bool(re.search(r'backup|bkp', filename, re.IGNORECASE)),
                    "Eh_Temporario": extensao in ['.tmp', '.bak', '.temp', '.old']
                })

            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao ler {caminho}: {e}")

    df = pd.DataFrame(dados)
    return df


# ===============================
# EXEMPLO DE USO
# ===============================
if __name__ == "__main__":
    root_dir = r"C:\Users\Pedro\Documents"  # <-- altere conforme seu diret√≥rio
    df = mapear_pastas(root_dir, calcular_hash=True)

    # Exporta para Excel e CSV
    df.to_excel("mapeamento_completo.xlsx", index=False)
    df.to_csv("mapeamento_completo.csv", index=False, encoding="utf-8-sig")

    print("\n‚úÖ Mapeamento conclu√≠do com sucesso!")
    print(f"üì¶ {len(df)} arquivos mapeados.")
    print("üíæ Arquivos salvos: 'mapeamento_completo.xlsx' e 'mapeamento_completo.csv'")