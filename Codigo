from cryptography.fernet import Fernet
from io import StringIO

class SecureEnvManager:
    """
    Classe genérica para gerenciar criptografia e carregamento de arquivos .env
    de forma automática e segura.
    """

    def __init__(self, config_path: Path):
        self.config_path = config_path
        self.env_file = config_path / ".env"
        self.enc_file = config_path / ".env.enc"
        self.key_file = config_path / "secret.key"

        logging.basicConfig(
            format="%(asctime)s [%(levelname)s] %(message)s",
            level=logging.INFO,
        )

    def _generate_key(self):
        """Gera e salva a chave de criptografia."""
        key = Fernet.generate_key()
        self.key_file.write_bytes(key)
        logging.info(f"🔐 Chave gerada e salva em: {self.key_file}")
        return key

    def _load_key(self):
        """Lê a chave existente do arquivo."""
        if not self.key_file.exists():
            logging.warning("⚠️ Nenhuma chave encontrada. Gerando nova...")
            return self._generate_key()
        return self.key_file.read_bytes()

    def encrypt_env(self):
        """Criptografa o arquivo .env original."""
        if not self.env_file.exists():
            logging.error("❌ Arquivo .env não encontrado para criptografar.")
            return False

        key = self._load_key()
        fernet = Fernet(key)

        env_data = self.env_file.read_bytes()
        encrypted_data = fernet.encrypt(env_data)
        self.enc_file.write_bytes(encrypted_data)

        logging.info(f"✅ Arquivo .env criptografado em: {self.enc_file}")

        # Opcional: apagar o original
        # self.env_file.unlink()
        return True

    def decrypt_env(self):
        """Descriptografa e carrega as variáveis de ambiente."""
        if not self.enc_file.exists():
            logging.error("❌ Nenhum arquivo .env.enc encontrado.")
            return False

        key = self._load_key()
        fernet = Fernet(key)
        decrypted_data = fernet.decrypt(self.enc_file.read_bytes()).decode()

        load_dotenv(stream=StringIO(decrypted_data))
        logging.info("✅ Variáveis de ambiente carregadas com sucesso!")
        return True

    def auto_manage(self):
        """
        Faz o controle automático:
        - Se existir apenas .env → criptografa
        - Se existir .env.enc → descriptografa e carrega
        """
        if self.env_file.exists() and not self.enc_file.exists():
            logging.info("📦 Detectado .env puro — iniciando criptografia...")
            self.encrypt_env()
            logging.info("✅ Criptografia concluída. Carregando variáveis...")
            self.decrypt_env()

        elif self.enc_file.exists():
            logging.info("🔐 Detectado .env criptografado — carregando variáveis...")
            self.decrypt_env()

        else:
            logging.error("❌ Nenhum arquivo de ambiente encontrado (.env ou .env.enc).")


# Execução direta (caso queira rodar standalone)
if __name__ == "__main__":
    manager = SecureEnvManager(Path(__file__).parent)
    manager.auto_manage()

from config.secure_env_manager import SecureEnvManager

# Inicializa e carrega o ambiente
config_dir = Path.cwd().parent.parent / "config"
manager = SecureEnvManager(config_dir)
manager.auto_manage()

