def pipeline_transformacao(dfs, locators):
    """Pipeline gen√©rico de transforma√ß√µes configuradas via JSON"""
    transforms_map = locators.get("__config__", {}).get("action_transforms_map", {})

    for sistema, df in dfs.items():
        if df is None or df.empty:
            continue

        WebScrapping.log(f"üîß Executando transforma√ß√µes para '{sistema}'", "INFO")

        transformations = locators.get(sistema, {}).get("transformations", {})

        # üîπ 1¬™ camada ‚Äî transforma√ß√µes diretas
        for transform_name, config in transformations.items():
            if transform_name == "modify_strings":
                continue  # tratado abaixo

            func_name = transforms_map.get(transform_name)
            if not func_name or not hasattr(TransformActions, func_name):
                continue

            func = getattr(TransformActions, func_name)

            # üî∏ Caso a configura√ß√£o seja uma lista, aplica para cada item
            configs = config if isinstance(config, list) else [config]
            for cfg in configs:
                WebScrapping.log(f"‚û°Ô∏è Aplicando transforma√ß√£o '{transform_name}'", "INFO")
                df = func(df, cfg)

        # üîπ 2¬™ camada ‚Äî transforma√ß√µes aninhadas dentro de modify_strings/configs[]
        modify_cfgs = transformations.get("modify_strings", {}).get("configs", [])
        for cfg in modify_cfgs:
            for sub_name, sub_cfg in cfg.items():
                func_name = transforms_map.get(sub_name)
                if func_name and hasattr(TransformActions, func_name):
                    func = getattr(TransformActions, func_name)
                    WebScrapping.log(f"‚û°Ô∏è Aplicando transforma√ß√£o '{sub_name}'", "INFO")
                    df = func(df, sub_cfg)

        dfs[sistema] = df
        WebScrapping.log(f"‚úÖ Transforma√ß√µes conclu√≠das para '{sistema}'", "INFO")

    return dfs
