class WebScrapping:
    @staticmethod
    def pipeline_transformacao(dfs, locators):
        """
        Pipeline de transforma√ß√£o din√¢mico baseado em transformations do locators.
        L√™ as transforma√ß√µes de cada sistema e executa conforme o dicion√°rio JSON.
        """
        for sistema, df in dfs.items():
            if df is None or df.empty:
                continue

            WebScrapping.log(f"üîß Executando transforma√ß√µes para '{sistema}'", "INFO")

            sistema_conf = locators.get(sistema, {})
            transformations = sistema_conf.get("transformations", {})
            if not transformations:
                WebScrapping.log(f"‚ö†Ô∏è Nenhuma transforma√ß√£o definida para '{sistema}'", "WARNING")
                continue

            # ‚úÖ Mapeamento de a√ß√µes de transforma√ß√£o ‚Äî prioriza o n√≠vel do sistema, depois o global
            transforms_map = (
                sistema_conf.get("action_transforms_map")
                or locators.get("__config__", {}).get("action_transforms_map", {})
            )

            for nome_transformacao, config in transformations.items():
                WebScrapping.log(f"‚û°Ô∏è Aplicando transforma√ß√£o '{nome_transformacao}'", "DEBUG")

                if not isinstance(config, dict):
                    WebScrapping.log(f"‚ö†Ô∏è Estrutura inesperada em '{nome_transformacao}'", "WARNING")
                    continue

                # 1Ô∏è‚É£ M√©todo din√¢mico (como extract_method)
                if "method" in config and isinstance(config["method"], dict):
                    metodo_cfg = config["method"]
                    metodo_nome = metodo_cfg.get("name")
                    func_name = transforms_map.get("method")

                    if func_name and hasattr(WebScrapping, func_name):
                        WebScrapping.log(f"‚öôÔ∏è Executando m√©todo '{metodo_nome}'", "DEBUG")
                        try:
                            getattr(WebScrapping, func_name)(df, metodo_cfg, locators)
                        except Exception as e:
                            WebScrapping.log(f"‚ùå Erro ao executar m√©todo '{metodo_nome}': {e}", "ERROR")
                    else:
                        WebScrapping.log(f"‚ö†Ô∏è M√©todo '{metodo_nome}' n√£o mapeado em action_transforms_map", "WARNING")

                # 2Ô∏è‚É£ Configura√ß√µes gen√©ricas (replace_values, normalize, etc.)
                elif "configs" in config and isinstance(config["configs"], list):
                    for item in config["configs"]:
                        if isinstance(item, dict):
                            for tipo_acao, parametros in item.items():
                                WebScrapping.log(f"üõ†Ô∏è Executando a√ß√£o '{tipo_acao}'", "DEBUG")
                                func_name = transforms_map.get(tipo_acao)

                                if func_name and hasattr(WebScrapping, func_name):
                                    try:
                                        getattr(WebScrapping, func_name)(df, parametros)
                                    except Exception as e:
                                        WebScrapping.log(f"‚ùå Erro ao executar a√ß√£o '{tipo_acao}': {e}", "ERROR")
                                else:
                                    WebScrapping.log(f"‚ö†Ô∏è A√ß√£o '{tipo_acao}' n√£o mapeada no action_transforms_map", "WARNING")

                # 3Ô∏è‚É£ Remo√ß√£o de colunas (ignore_select_columns)
                elif "columns" in config and isinstance(config["columns"], list):
                    cols_to_drop = [c for c in config["columns"] if c in df.columns]
                    if cols_to_drop:
                        df.drop(columns=cols_to_drop, inplace=True, errors="ignore")
                        WebScrapping.log(f"üßπ Colunas removidas: {cols_to_drop}", "DEBUG")

                else:
                    WebScrapping.log(f"‚ö†Ô∏è Estrutura inesperada em '{nome_transformacao}': {config}", "WARNING")

            WebScrapping.log(f"‚úÖ Transforma√ß√µes conclu√≠das para '{sistema}'", "INFO")

        return dfs
