import os
import re
import subprocess
import warnings
from pathlib import Path
from dotenv import load_dotenv
from classes.WebScrapping import WebScrapping  # ajuste o import conforme seu projeto

# ==========================================================
# üîß Configura√ß√£o inicial (segue seu padr√£o)
# ==========================================================
load_dotenv(Path.cwd().parent.parent.parent / "Env" / ".env")
warnings.filterwarnings("ignore", category=UserWarning, module="openpyxl")


class EdgeVersionChecker:
    """
    Verifica compatibilidade entre:
    - Vers√£o do Microsoft Edge instalada
    - Vers√£o do EdgeDriver configurada no .env
    """

    def __init__(self):
        self.edge_driver_path = os.getenv("EDGEDRIVER-PATH")

    # ==========================================================
    # üß© M√©todos principais
    # ==========================================================
    def versao_navegador_edge_instalada(self):
        """Obt√©m a vers√£o do Microsoft Edge instalada."""
        try:
            out = subprocess.check_output(
                r'reg query "HKEY_CURRENT_USER\Software\Microsoft\Edge\BLBeacon" /v version',
                shell=True, text=True
            )
            return re.search(r"(\d+\.\d+\.\d+\.\d+)", out).group(1)
        except Exception:
            # Tentativa alternativa via CLI
            out = subprocess.check_output("msedge --version", shell=True, text=True)
            return re.search(r"(\d+\.\d+\.\d+\.\d+)", out).group(1)

    def versao_edge_driver_download(self):
        """Obt√©m a vers√£o contida no caminho configurado no .env."""
        if not self.edge_driver_path:
            raise ValueError("‚ùå A vari√°vel 'EDGEDRIVER-PATH' n√£o foi configurada no .env")

        match = re.search(r"(\d+\.\d+\.\d+\.\d+)", self.edge_driver_path)
        if not match:
            raise ValueError(f"‚ùå Caminho inv√°lido no EDGEDRIVER-PATH: {self.edge_driver_path}")
        return match.group(1)

    def verificar_compatibilidade(self):
        """Compara vers√µes e gera logs via WebScrapping.log."""
        try:
            navegador = self.versao_navegador_edge_instalada()
            driver = self.versao_edge_driver_download()
            url_download = f"https://msedgedriver.microsoft.com/{driver}/edgedriver_win64.zip"

            if navegador != driver:
                WebScrapping.log(
                    f"‚ö†Ô∏è [Edge-Navegador-VS-EdgeDriver]: Vers√£o do navegador {navegador} diferente do msedgedriver.exe {driver}, instalada em: {self.edge_driver_path}",
                    "CRITICAL"
                )
                WebScrapping.log(
                    f"üì• [Aten√ß√£o]: Fa√ßa o download da vers√£o compat√≠vel: {url_download}",
                    "CRITICAL"
                )
                return {
                    "status": "incompat√≠vel",
                    "navegador": navegador,
                    "driver": driver,
                    "download_url": url_download
                }

            WebScrapping.log(
                f"‚úÖ [EdgeDriver OK]: Navegador e driver est√£o na mesma vers√£o ({navegador}).",
                "INFO"
            )
            return {
                "status": "compat√≠vel",
                "versao": navegador,
                "download_url": url_download
            }

        except Exception as e:
            WebScrapping.log(f"‚ùå Erro ao verificar compatibilidade do EdgeDriver: {e}", "ERROR")
            return {"status": "erro", "mensagem": str(e)}


# ==========================================================
# üöÄ Execu√ß√£o direta (opcional)
# ==========================================================
if __name__ == "__main__":
    checker = EdgeVersionChecker()
    resultado = checker.verificar_compatibilidade()
    print(resultado)
