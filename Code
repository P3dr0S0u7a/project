class WebScrapping:
    ...

    @staticmethod
    def action_transform_conditional_new_column(df, config, locators=None):
        """
        Cria uma nova coluna condicional baseada em regras.
        Exemplo de config:
        {
            "column_name": "NovaColuna",
            "conditions": [
                {"if": "ColA > 10", "then": "Alto"},
                {"if": "ColA <= 10", "then": "Baixo"}
            ]
        }
        """
        for cond in config.get("conditions", []):
            mask = df.eval(cond["if"])
            df.loc[mask, cond.get("column_name", "NovaColuna")] = cond["then"]
        return df

    @staticmethod
    def action_transform_replace_values(df, config, locators=None):
        """
        Substitui valores de uma coluna
        Exemplo de config:
        {
            "column": "ColA",
            "to_replace": {"A": "X", "B": "Y"}
        }
        """
        coluna = config.get("column")
        if coluna and coluna in df.columns:
            df[coluna] = df[coluna].replace(config.get("to_replace", {}))
        return df

    @staticmethod
    def action_transform_replace_strings(df, config, locators=None):
        """
        Substitui substrings dentro de uma coluna
        Exemplo de config:
        {
            "column": "ColA",
            "replacements": {"abc": "xyz", "def": "uvw"}
        }
        """
        coluna = config.get("column")
        if coluna and coluna in df.columns:
            for old, new in config.get("replacements", {}).items():
                df[coluna] = df[coluna].str.replace(old, new, regex=False)
        return df

    @staticmethod
    def action_transform_uppercase(df, config, locators=None):
        """
        Converte coluna para maiúsculas
        Exemplo de config:
        {
            "column": "ColA"
        }
        """
        coluna = config.get("column")
        if coluna and coluna in df.columns:
            df[coluna] = df[coluna].str.upper()
        return df

    @staticmethod
    def action_transform_new_column(df, config, locators=None):
        """
        Cria nova coluna com valor fixo ou derivado
        Exemplo de config:
        {
            "column": "NovaColuna",
            "value": 100
        }
        """
        coluna = config.get("column")
        df[coluna] = config.get("value")
        return df

    @staticmethod
    def action_transforms_method(df, config, locators=None):
        """
        Chamadas genéricas de métodos customizados (como era extract_method)
        config deve conter "name": nome_do_metodo
        """
        metodo_nome = config.get("name")
        if metodo_nome and hasattr(WebScrapping, metodo_nome):
            getattr(WebScrapping, metodo_nome)(df, config, locators)
        return df
