@staticmethod
def action_transform_conditional_new_column(df, config):
    """Cria uma ou mais novas colunas baseadas em condições sobre outras colunas"""

    # Caso venha uma lista de condições, percorre todas
    configs = config if isinstance(config, list) else [config]

    for cfg in configs:
        src_cfg = cfg.get("source_column", {})
        column = src_cfg.get("column")
        target_column = src_cfg.get("target_column")
        cond = src_cfg.get("condition", {})

        if not column or column not in df.columns:
            WebScrapping.log(f"⚠️ Coluna '{column}' não encontrada no DataFrame.", "WARNING")
            continue

        case_insensitive = cond.get("case_insensitive", True)
        contains_val = cond.get("contains", "")
        val_true = cond.get("value_if_True", None)
        val_false = cond.get("value_if_False", None)

        df[column] = df[column].astype(str).replace({"nan": "", "NaN": "", "<NA>": "", None: ""})

        try:
            mask = (
                df[column].str.lower().str.contains(str(contains_val).lower(), na=True)
                if case_insensitive
                else df[column].str.contains(str(contains_val), na=True)
            )
            df[target_column] = np.where(mask, val_true, val_false)
            WebScrapping.log(
                f"✅ Condicional '{contains_val}' aplicada na coluna '{column}' → '{target_column}'",
                "INFO"
            )
        except Exception as e:
            WebScrapping.log(f"❌ Erro em action_transform_conditional_new_column: {e}", "ERROR")

    return df
