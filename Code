@staticmethod
def action_transform_parse_dates(df, config):
    """Converte colunas para datetime, com toler√¢ncia a m√∫ltiplos formatos"""
    columns = config.get("columns", [])
    columns = [columns] if isinstance(columns, str) else columns

    def parse_datas(x):
        """Transforma strings em datas, aceitando diferentes formatos"""
        if pd.isnull(x):
            return x
        try:
            return pd.to_datetime(x, format="%d/%m/%Y %H:%M:%S", dayfirst=True, errors="coerce")
        except Exception:
            try:
                return pd.to_datetime(x, dayfirst=True, errors="coerce")
            except Exception:
                return x

    for col in columns:
        if col not in df.columns:
            WebScrapping.log(f"‚ö†Ô∏è Coluna '{col}' n√£o encontrada no DataFrame.", "WARNING")
            continue

        try:
            # Aplica o parser linha a linha com toler√¢ncia a erros
            df[col] = df[col].apply(parse_datas)
            WebScrapping.log(f"üìÖ Coluna '{col}' convertida para datetime", "INFO")
        except Exception as e:
            WebScrapping.log(f"‚ùå Erro ao converter coluna '{col}' para datetime: {e}", "ERROR")

    return df
