@staticmethod
def pipeline_transformacao(dfs, locators):
    """Executa transforma√ß√µes din√¢micas para cada sistema com base nas configura√ß√µes JSON"""

    for sistema, df in dfs.items():
        if df is None or df.empty:
            continue

        WebScrapping.log(f"üîß Executando transforma√ß√µes para '{sistema}'", "INFO")
        sistema_conf = locators.get(sistema, {})
        transformations = sistema_conf.get("transformations", {}).get("type", {})

        for transform_name, config in transformations.items():
            if transform_name not in action_transforms_map:
                continue

            func_name = action_transforms_map[transform_name]
            func = getattr(WebScrapping, func_name, None)

            if func is None:
                WebScrapping.log(f"‚ö†Ô∏è Fun√ß√£o {func_name} n√£o encontrada", "WARNING")
                continue

            WebScrapping.log(f"‚û°Ô∏è Aplicando transforma√ß√£o '{transform_name}'")
            try:
                df = func(df, config)
            except Exception as e:
                WebScrapping.log(f"‚ùå Erro ao aplicar transforma√ß√£o '{transform_name}': {e}", "ERROR")

        dfs[sistema] = df
        WebScrapping.log(f"‚úÖ Transforma√ß√µes conclu√≠das para '{sistema}'", "INFO")

    return dfs
